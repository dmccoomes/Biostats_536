plot3
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.2) #transparency
plot3
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.1) #transparency
plot3
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.0) #transparency
plot3
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
plot3
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.2) #transparency
plot3
library(scales)
# customize Y axis
plot4 = plot3 + scale_y_continuous(breaks=c(0,10, 25,40,50),
limits = c(0, 50), # expand = c(0, 0),
labels=scales::unit_format(suffix = '%'))
plot4
plot5 = plot4 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plot5
###
ToPlotOrd=sort(ToPlot)
###
par(mgp=c(1,0.5,0)) # distance label, tickText,tick
location=barplot(ToPlotOrd,
col = paletteHereNew,
border=NA,
main=titleText2,
xlim=c(0,50),
xlab = '(in %)',
horiz = T,
cex.names = 0.7,
cex.lab=0.6,
xaxt="n") # no x-axis, so I customize it below...
text(x=ToPlotOrd,y=location,labels=plotLabels,pos = 2,cex = 0.7)
title(sub=sourceText, adj=0,cex.sub=0.7,line = 3)
# reference line
abline(v=25,lty=3,lwd=3)
# customizong tick values
xtick<-c(0,10,25,40,50)
axis(side=1, at=xtick, labels = xtick,cex.axis=0.8)
tableFreq[order(-tableFreq$pct),]
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3)
# wanna flip the plot?
plot6 + coord_flip()
tableFreq[order(-tableFreq$pct),]
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3)
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(plot6, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order, decreasing=TRUE)
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
)
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(-tableFreq$pct))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(-tableFreq$pct)
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(-tableFreq$pct, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(-tableFreq$pct, decreasing=TRUE)
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(tableFreq$pct, decreasing=TRUE)
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3
order(tableFreq$pct, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order(tableFreq$pct, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order( decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order(decreasing=FALSE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order(increasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order(decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
order(tableFreq$pct, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3,
#order(tableFreq$pct, decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
hjust=1, # if flipping 'hjust'
size = 3,
order(tableFreq$pct, decreasing=TRUE))
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
hjust=1, # if flipping 'hjust'
size = 3,
#order(tableFreq$pct, decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
hjust=1, # if flipping 'hjust'
size = 3)
#order(tableFreq$pct, decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
plot6 = plot5 + geom_text(aes(y = pct ,
label = paste0(round(pct,2), '%')),
hjust=1, # if flipping 'hjust'
size = 3)
#order(tableFreq$pct, decreasing=TRUE))
# wanna flip the plot?
plot6 + coord_flip()
id <- 1:20
id <- 1:20
# Outcomes if exposed (a=1)
Ya1 <- c(T, T, T, F, F,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F)
# Outcomes if unexposed (a=0)
Ya0 <- c(T, F, T, F, F,
T, F, T, F, T,
F, F, T, F, F,
T, F, T, F, F)
(base_cohort <- data.frame(id, Ya1, Ya0))
mean(base_cohort$Ya1) - mean(base_cohort$Ya0)
view(Ya1)
View(Ya1)
View(base_cohort)
base_cohort$response_type <- ifelse(Ya1&Ya0,
"doomed",
ifelse(Ya1&!Ya0,
"causal",
ifelse(!Ya1&Ya0,
"preventative",
"immune")))
table(base_cohort$response_type)
cohort1 <- base_cohort
cohort1$A <- c(T, T, T, T, T,
T, T, T, T, T,
F, F, F, F, F,
F, F, F, F, F)
View(cohort1)
cohort1$Y <- ifelse(cohort1$A, cohort1$Ya1, cohort1$Ya0)
cohort1
(association <- mean(cohort1$Y[cohort1$A==1]) - mean(cohort1$Y[cohort1$A == 0]))
(causal_effect <- mean(cohort1$Ya1) - mean(cohort1$Ya0))
base_cohort$response_type <- ifelse(Ya1&Ya0,
"doomed",
ifelse(Ya1&!Ya0,
"causal",
ifelse(!Ya1&Ya0,
"preventative",
"immune")))
table(base_cohort$response_type)
# Were there disproportionate doomed among the exposed or unexposed?  How about immune?
table(cohort1$response_type, cohort1$A)
cohort2 <- base_cohort
cohort2$A <- c(T, T, T, F, F,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F)
# Compute the observed outcome under this treatment regime
cohort2$Y <- ifelse(cohort2$A, cohort2$Ya1, cohort2$Ya0)
(association <- mean(cohort2$Y[cohort2$A==1]) - mean(cohort2$Y[cohort2$A == 0]))
table(cohort2$response_type, cohort2$A)
cohort3 <- base_cohort
cohort3$A <- c(T, T, F, F, F,
T, F, F, F, T,
T, T, T, T, F,
F, T, F, F, T)
table(cohort3$response_type, cohort3$A)
# Now the observed association is the causal effect
cohort3$Y <- ifelse(cohort3$A, cohort3$Ya1, cohort3$Ya0)
(association <- mean(cohort3$Y[cohort3$A==1]) - mean(cohort3$Y[cohort3$A == 0]))
set.seed(12345)
cohort4 <- base_cohort
cohort4$A <- rbinom(20, 1, .5) == 1
cohort4$Y <- ifelse(cohort4$A, cohort4$Ya1, cohort4$Ya0)
###########################################################
# 4. Did randomization create exchangeability?
mean(cohort4$Y[cohort4$A==1]) - mean(cohort4$Y[cohort4$A == 0])
table(cohort4$response_type, cohort4$A)
set.seed(12345)
cohort4 <- base_cohort
cohort4$A <- rbinom(20, 1, .5) == 1
cohort4$Y <- ifelse(cohort4$A, cohort4$Ya1, cohort4$Ya0)
###########################################################
# 4. Did randomization create exchangeability?
mean(cohort4$Y[cohort4$A==1]) - mean(cohort4$Y[cohort4$A == 0])
table(cohort4$response_type, cohort4$A)
set.seed(12345)
reps <- 500
result <- vector(length=reps)
for (i in 1:length(result)) {
A <- rbinom(20, 1, .5) == 1
Y <- ifelse(A, base_cohort$Ya1, base_cohort$Ya0)
result[i] <- mean(Y[A==1]) - mean(Y[A == 0])
}
result
results_over_runs <- data.frame(
run <- 1:reps,
cumulative_mean <- cumsum(result)/seq_along(result)
)
# It actually takes quite a while to converge to the causal effect
plot(results_over_runs$run, results_over_runs$cumulative_mean)
set.seed(12345)
reps <- 5000
result <- vector(length=reps)
for (i in 1:length(result)) {
A <- rbinom(20, 1, .5) == 1
Y <- ifelse(A, base_cohort$Ya1, base_cohort$Ya0)
result[i] <- mean(Y[A==1]) - mean(Y[A == 0])
}
result
# Look at the mean as we run more and more simulations
results_over_runs <- data.frame(
run <- 1:reps,
cumulative_mean <- cumsum(result)/seq_along(result)
)
# It actually takes quite a while to converge to the causal effect
plot(results_over_runs$run, results_over_runs$cumulative_mean)
# Simulate a truth
id <- 1:40
Ya0 <- c(T, F, T, F, F,
T, F, T, F, T,
F, F, T, F, F,
T, F, T, F, F,
T, F, T, F, F,
T, F, T, F, T,
F, F, T, F, F,
T, F, T, F, F)
Ya1 <- c(T, T, T, F, F,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F,
T, T, T, F, F,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F)
Ya2 <- c(T, T, T, T, T,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F,
T, T, T, F, F,
T, T, F, F, T,
F, F, F, F, T,
T, T, T, F, F)
# Create the cohort
(part2_cohort <- data.frame(id, Ya0, Ya1, Ya2))
Ya1 == Ya2
mean(part2_cohort$Ya1) - mean(part2_cohort$Ya0)
mean(part2_cohort$Ya2) - mean(part2_cohort$Ya0)
part2_cohort$TrueA <- c(1, 0, 2, 2, 2,
1, 1, 0, 0, 0,
0, 1, 2, 1, 0,
0, 1, 0, 0, 0,
2, 0, 0, 0, 1,
0, 0, 1, 2, 0,
2, 0, 0, 1, 1,
1, 1, 2, 0, 0)
part2_cohort$Y <- ifelse(part2_cohort$TrueA == 0,
part2_cohort$Ya0,
ifelse(part2_cohort$TrueA == 1,
part2_cohort$Ya1,
part2_cohort$Ya2))
part2_cohort$A <- !(part2_cohort$TrueA == 0)
# The observed association does not equal the causal effect ...
mean(part2_cohort$Y[part2_cohort$A == 1]) - mean(part2_cohort$Y[part2_cohort$A == 0])
# .. Even though the response types (with respect to variant #1) appear to be exchangeable
part2_cohort$response_type <- ifelse(part2_cohort$Ya1&part2_cohort$Ya0,
"doomed",
ifelse(part2_cohort$Ya1&!part2_cohort$Ya0,
"causal",
ifelse(!part2_cohort$Ya1&part2_cohort$Ya0,
"preventative",
"immune")))
table(part2_cohort$response_type, part2_cohort$A)
a <- c("low","low","medium","high","low","high")
class(a)
b <- as.factor(a)
b
b
class(b)
string(b)
str(b)
#changing factor to other type of variable - string or number
c <- as.character(b)
c
#Combining levels
b
levels(b)
levels(b) <- list(high_and_med=c("high","medium"), low=c("low"))
b
# Adding everything together at once
g <- factor(a, levels=c("low","medium","high"),labels=c("L","M","H"))
g
str(g)
#Viewing factors
titanic <- readRDS("Titanic_Data_Subset_RDS.rds")
#Viewing factors
titanic <- readRDS("Desktop/Dave/School/BIOST 536/Homework:section/Data/Titanic_Data_Subset_RDS.rds")
titanic$Sex_factor <- as.factor(titanic$Sex)
summary(titanic$Sex_factor)
titanic$Embarked_factor <- as.factor(titanic$Embarked)
summary(titanic$Embarked_factor)
titanic[titanic$Embarked_factor == "",]
levels(titanic$Embarked_factor) <- c("Missing","C","Q","S")
summary(titanic$Embarked_factor)
#Cutting numerical variables to make factors
age <- titanic$Age[!is.na(titanic$Age)]   #this makes a vector of non-missing age
age_1 <- cut(age,3)
summary(age_1)
age_2 <- cut(age, c(0,50,100))  #manually add the cut points
summary(age_2)
age_2_also <- factor(age>50, levels=c(FALSE, TRUE), labels=c("Young","Old"))
str(age_2_also)
#Vector creation tips
#repeat 'a' 3 times
rep("a",3)
#repeat the vector (1,2) four times
rep(c(1,2),4)
#create sequences
seq(1,3)
seq(1,3,by=0.5)
seq(1,3,length=4)
#Using by()
by(titanic$Fare, titanic$Sex_factor, mean)
by(titanic[,c("Fare","Age")], titanic$Sex_factor, summary)
#Using tableone package
library(tableone)
#Using tableone package
install.packages(tableone)
#Using tableone package
install.packages("tableone")
library(tableone)
CreateCatTable(c("Survived","Embarked"),strata="Sex",data=titanic, test=FALSE)
#Fitting logistic models
model_1 <- glm(Survived~Age+Sex, data=titanic, family=binomial)
#Fitting logistic models
model_1 <- glm(Survived~Age+Sex, data=titanic, family=binomial)
#Always use binaomial family for logistic regression!
summary(model_1)
#Code goes here; output appears below
set.seed(45)#Just making it so that my random numbers are the same each time
a <- rnorm(mean=0,sd=2,n=20)#random numbers from a Normal distribution
mean(a)
#This code won't be shown, but it will be run and output will show up
mean(a)
#This output won't be shown, but it will still run in R
mean(a)
#This would be how to do all your coding for which the output isn't pretty enough for homework
#All this code runs, but nothing shows up in your knitted document
#Any variable I create here will be 'remembered' for the rest of this knitted document.
mean(a)
#Sometimes in a work-in-progress, you may want a knitted copy of everything - even things that go wrong.
#This wouldn't be a chunk option to use in a polished homework assignment
head(titanic)#This is an error because I haven't loaded the  titanic data in this document yet (even though it's loaded in my RStudio right now)
mean(a)
hist(a)
hist(a)
#Still run in R, though!
sex <- rbinom(1,n=20,prob=.5)
height <- rnorm(mean=(50+10*sex),sd=10,n=20)
hair_color <- rep(c("brown","black","blond"),length=20)
toy.data <- data.frame(sex,height,hair_color)
desc(toy.data)
View(toy.data)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
set.seed(67)
hiv <- rnorm(mean=0, sd=25, n=100)
mean(hiv)
knitr::opts_chunk$set(echo = TRUE)
esoph <- readRDS("Desktop/Dave/School/BIOST 536/Data/R Console.txt")
esoph <- readRDS("Desktop/Dave/School/BIOST 536/Data/esoph.rds")
head esoph
esoph <- readRDS("Desktop/Dave/School/BIOST 536/Data/esoph.rds")
head(esoph)
link = "https://github.com/dmccoomes/Biostats_536/raw/master/esoph%20(2).rds"
esoph <- readRDS(url(link))
library(knitr)
library(UWbe536)
install.packages("UWbe536")
library(knitr)
library(UWbe536)
library(knitr)
install.packages("UWbe536")
library(UWbe536)
link = "https://github.com/dmccoomes/Biostats_536/raw/master/esoph%20(2).rds"
esoph <- readRDS(url(link))
library(knitr)
install.packages(UWbe536)
library(UWbe536)
install.packages("UWbe536")
library(knitr)
#install.packages("UWbe536")
library(UWbe536)
library(knitr)
install.packages("UWbe536")
library(UWbe536)
library(knitr)
library(devtools)
library(UWbe536)
library(knitr)
library(devtools)
install_github("bmckuw/UWbe536")
install.packages("devtools")
library(knitr)
library(devtools)
library(knitr)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(knitr)
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("git2r")
install.packages("pkgbuild")
install.packages("rcmdcheck")
library(knitr)
install.packages("devtools")
library(devtools)
library(knitr)
install.packages("devtools")
library(devtools)
library(knitr)
install.packages("devtools")
library(devtools)
